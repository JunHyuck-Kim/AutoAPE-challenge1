import numpy as np
import pandas as pd
import datetime as dt
import os
from tqdm import tqdm
from lightgbm import LGBMClassifier

dtypes = {
    'MachineIdentifier':                                    'object',
    'ProductName':                                          'object',
    'EngineVersion':                                        'object',
    'AppVersion':                                           'object',
    'AvSigVersion':                                         'object',
    'IsBeta':                                               'int8',
    'RtpStateBitfield':                                     'float16',
    'IsSxsPassiveMode':                                     'int8',
    'DefaultBrowsersIdentifier':                            'float32',
    'AVProductStatesIdentifier':                            'float32',
    'AVProductsInstalled':                                  'float16',
    'AVProductsEnabled':                                    'float16',
    'HasTpm':                                               'int8',
    'CountryIdentifier':                                    'int16',
    'CityIdentifier':                                       'float32',
    'OrganizationIdentifier':                               'float16',
    'GeoNameIdentifier':                                    'float16',
    'LocaleEnglishNameIdentifier':                          'int16',
    'Platform':                                             'object',
    'Processor':                                            'object',
    'OsVer':                                                'object',
    'OsBuild':                                              'int16',
    'OsSuite':                                              'int16',
    'OsPlatformSubRelease':                                 'object',
    'OsBuildLab':                                           'object',
    'SkuEdition':                                           'object',
    'IsProtected':                                          'float16',
    'AutoSampleOptIn':                                      'int8',
    'PuaMode':                                              'object',
    'SMode':                                                'float16',
    'IeVerIdentifier':                                      'float16',
    'SmartScreen':                                          'object',
    'Firewall':                                             'float16',
    'UacLuaenable':                                         'float64',
    'Census_MDC2FormFactor':                                'object',
    'Census_DeviceFamily':                                  'object',
    'Census_OEMNameIdentifier':                             'float32',
    'Census_OEMModelIdentifier':                            'float32',
    'Census_ProcessorCoreCount':                            'float16',
    'Census_ProcessorManufacturerIdentifier':               'float16',
    'Census_ProcessorModelIdentifier':                      'float32',
    'Census_ProcessorClass':                                'object',
    'Census_PrimaryDiskTotalCapacity':                      'float64',
    'Census_PrimaryDiskTypeName':                           'object',
    'Census_SystemVolumeTotalCapacity':                     'float64',
    'Census_HasOpticalDiskDrive':                           'int8',
    'Census_TotalPhysicalRAM':                              'float32',
    'Census_ChassisTypeName':                               'object',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32',
    'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32',
    'Census_InternalPrimaryDisplayResolutionVertical':      'float32',
    'Census_PowerPlatformRoleName':                         'object',
    'Census_InternalBatteryType':                           'object',
    'Census_InternalBatteryNumberOfCharges':                'float64',
    'Census_OSVersion':                                     'object',
    'Census_OSArchitecture':                                'object',
    'Census_OSBranch':                                      'object',
    'Census_OSBuildNumber':                                 'int16',
    'Census_OSBuildRevision':                               'int32',
    'Census_OSEdition':                                     'object',
    'Census_OSSkuName':                                     'object',
    'Census_OSInstallTypeName':                             'object',
    'Census_OSInstallLanguageIdentifier':                   'float16',
    'Census_OSUILocaleIdentifier':                          'int16',
    'Census_OSWUAutoUpdateOptionsName':                     'object',
    'Census_IsPortableOperatingSystem':                     'int8',
    'Census_GenuineStateName':                              'object',
    'Census_ActivationChannel':                             'object',
    'Census_IsFlightingInternal':                           'float16',
    'Census_IsFlightsDisabled':                             'float16',
    'Census_FlightRing':                                    'object',
    'Census_ThresholdOptIn':                                'float16',
    'Census_FirmwareManufacturerIdentifier':                'float16',
    'Census_FirmwareVersionIdentifier':                     'float16',
    'Census_IsSecureBootEnabled':                           'int8',
    'Census_IsWIMBootEnabled':                              'float16',
    'Census_IsVirtualDevice':                               'float16',
    'Census_IsTouchEnabled':                                'int8',
    'Census_IsPenCapable':                                  'int8',
    'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
    'Wdft_IsGamer':                                         'float16',
    'Wdft_RegionIdentifier':                                'float16',
    'HasDetections':                                        'float32',
}

print(os.listdir("../input"))

train = pd.read_csv("../input/Microsoft-Malware-Prediction/train.csv",dtype=dtypes)
test = pd.read_csv("../input/Microsoft-Malware-Prediction/test.csv",dtype=dtypes)

drop_column = ['Census_ProcessorClass', 'Census_IsWIMBootEnabled', 'IsBeta',
               'Census_IsFlightsDisabled', 'Census_IsFlightingInternal', 'AutoSampleOptIn', 'Census_ThresholdOptIn', 'SMode',
               'Census_IsPortableOperatingSystem', 'PuaMode', 'Census_DeviceFamily', 'UacLuaenable', 'Census_IsVirtualDevice',
               'Platform', 'Census_OSSkuName', 'Census_OSInstallLanguageIdentifier', 'Processor']

train = train.drop(drop_column, axis=1)
test = test.drop(drop_column,axis=1)

train.dropna(0, inplace=True)
train = train.drop('MachineIdentifier', axis=1)
test = test.drop('MachineIdentifier', axis=1)
y_train = train['HasDetections']
train = train.drop('HasDetections', axis=1)

train_length = train.shape[0]
numerics = ['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']
numerical_columns = [c for c,v in dtypes.items() if v in numerics]
categorical_columns = [c for c,v in dtypes.items() if v not in numerics and drop_column]

data_all = pd.concat((train, test), axis=0, ignore_index = True)
data_all = data_all.fillna(-1)
data_length = data_all.shape[0]

for col in tqdm(categorical_columns):
    if col=='MachineIdentifier' or col == 'HasDetections' or col in drop_column:
        continue
    combined, _ = pd.factorize(data_all[col], sort=True)
    combined = pd.Series(combined).astype('int32')
    data_all[col] = combined.iloc[:data_length].values
    data_all[col] = data_all[col].fillna(0)
    del combined

vals = data_all.values
train = vals[:train_length]
test = vals[train_length:]

lgb = LGBMClassifier(n_estimators=300, learning_rate=0.03, max_depth=4)
lgb.fit(train, y_train)

pred = lgb.predict(test)
pred = (pred-min(pred))/(max(pred)-min(pred))

submission = pd.read_csv('../input/Microsoft-Malware-Prediction/sample_submission.csv')
submission['HasDetections'] = pred
submission.to_csv('malware_pc.csv', index = False, header = True)
